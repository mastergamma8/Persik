from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, PreCheckoutQuery
from aiogram.fsm.storage.memory import MemoryStorage
from payment import send_invoice_handler, pre_checkout_handler
from payment_keyboard import payment_keyboard
import asyncio

TOKEN = "7876195830:AAGCWrMFWJ6fmB4q47flqPGq_7TcHOcSBwA"
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_balances = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Premier Brawl", callback_data="download_game")]]
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å Premier Brawl, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard
    )

# –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å"
@dp.callback_query(F.data == "download_game")
async def download_game_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    balance = user_balances.get(user_id, 0)

    if balance >= 100:
        user_balances[user_id] = balance - 100  # –°–ø–∏—Å–∞–Ω–∏–µ –∑–≤—ë–∑–¥
        await callback.message.answer(
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è..."
        )
        await asyncio.sleep(2)
        await callback.message.answer("–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: https://link.brawlstars.com/?action=voucher&code=8142f715-a879-4d19-9af3-fa49e72ef59a")
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="recharge_balance")]]
        )
        await callback.message.answer(
            "–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 100 –∑–≤—ë–∑–¥.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=keyboard,
        )

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.callback_query(F.data == "recharge_balance")
async def recharge_balance_handler(callback: types.CallbackQuery):
    await send_invoice_handler(bot, callback.from_user.id)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
dp.pre_checkout_query.register(pre_checkout_handler)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@dp.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    user_id = message.from_user.id
    user_balances[user_id] = user_balances.get(user_id, 0) + 100
    await message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100 –∑–≤—ë–∑–¥.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
